package decidingFactorReturns.GUI;

import decidingFactorReturns.structures.Node;
import decidingFactorReturns.utils.I18n;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.util.Stack;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

public class MainFrame extends javax.swing.JFrame {

    private static MainFrame instance;

    public static MainFrame getInstance() {
        if (instance == null) {
            instance = new MainFrame();
        }
        return instance;
    }
    private Component activePanel;
    private Stack<Node> showingNodes;

    /** Creates new form MainFrame */
    public MainFrame() {
        showingNodes = new Stack<Node>();
        initComponents();
        this.getContentPane().setLayout(new BorderLayout());
        Dimension screenSize = getToolkit().getScreenSize();
        this.setLocation((screenSize.width - getWidth()) / 2, (screenSize.height - getHeight()) / 2);
    }

    public void changePanel(JPanel panel) {
        if (activePanel != null) {
            getContentPane().remove(activePanel);
        }
        activePanel = panel;
        getContentPane().add(activePanel, BorderLayout.CENTER);
        pack();
        repaint();
    }

    public void menu() {
        showingNodes.clear();
        changePanel(new InitialMenuPanel());
    }

    public void pushNode(Node node) {
        if (node.isHipotesis()) {
            showingNodes.push(node);
        } else {
            throw new IllegalArgumentException(I18n.t("error_node_not_hipotesis"));
        }
    }

    public Node popNode() {
        return showingNodes.pop();
    }

    private void viewHipotesis() {
        if (showingNodes.empty()) {
            if (JOptionPane.showConfirmDialog(this, I18n.t("alert_cancel_editing"), I18n.t("warning"), JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE)
                    == JOptionPane.OK_OPTION) {
                menu();
            }
        } else {
            changePanel(new ViewHipotesisPanel(showingNodes.peek()));
        }
    }

    public void upTree() {
        popNode();
        viewHipotesis();
    }

    public void downTree() {
        viewHipotesis();
    }

    public void finishEditing() {
        viewHipotesis();
    }

    public void startEditing() {
        changePanel(new EditNodePanel(showingNodes.peek()));
    }

    public void startEditing(Node node, Node parent) {
        changePanel(new EditNodePanel(node, parent));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                MainFrame.getInstance().setVisible(true);
                MainFrame.getInstance().menu();
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
