package decidingFactorReturns.GUI;

import decidingFactorReturns.controllers.Edit;
import decidingFactorReturns.policies.Policy;
import decidingFactorReturns.structures.Node;
import decidingFactorReturns.utils.I18n;
import java.io.File;
import java.io.IOException;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.AbstractTableModel;

public class ViewHipotesisPanel extends javax.swing.JPanel {

    private Node hipotesis;

    /** Creates new form ViewHipotesisPanel */
    public ViewHipotesisPanel(Node hipotesis) {
        this.hipotesis = hipotesis;
        initComponents();
        childrenTable.getColumnModel().getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        policyComboBox.setSelectedIndex(hipotesis.getPolicy().policyCode());
        if (hipotesis.getPolicy().hasCondition()) {
            conditionNodeComboBox.setSelectedIndex(hipotesis.getChildren().indexOf(hipotesis.getPolicy().getConditionNode()));
        } else {
            conditionNodeComboBox.setSelectedIndex(0);
        }
        MainFrame.getInstance().setTitle(I18n.t("view_title"));
    }

    private String[] getChildrenNames() {
        String[] names = new String[hipotesis.getChildren().size() + 1];
        names[0] = "";
        for (int i = 0; i < hipotesis.getChildren().size(); i++) {
            names[i + 1] = hipotesis.getChildren().get(i).getName();
        }
        return names;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        hipotesisNameLabel = new javax.swing.JLabel();
        policyLabel = new javax.swing.JLabel();
        policyComboBox = new javax.swing.JComboBox();
        conditionNodeLabel = new javax.swing.JLabel();
        conditionNodeComboBox = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        childrenTable = new javax.swing.JTable();
        addChildButton = new javax.swing.JButton();
        removeChildButton = new javax.swing.JButton();
        upTreeButton = new javax.swing.JButton();
        downTreeButton = new javax.swing.JButton();
        saveTreeButton = new javax.swing.JButton();
        editNodeButton = new javax.swing.JButton();

        hipotesisNameLabel.setText(I18n.t("node_name") + ": " + hipotesis.getName());

        policyLabel.setText(I18n.t("node_policy"));

        policyComboBox.setModel(new javax.swing.DefaultComboBoxModel(Policy.POLICIES_NAMES));
        policyComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                policyComboBoxActionPerformed(evt);
            }
        });

        conditionNodeLabel.setText(I18n.t("condition_node"));

        conditionNodeComboBox.setModel(new javax.swing.DefaultComboBoxModel(getChildrenNames()));
        conditionNodeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conditionNodeComboBoxActionPerformed(evt);
            }
        });

        childrenTable.setModel(new NodesTableModel(hipotesis.getChildren()));
        childrenTable.setCellSelectionEnabled(true);
        jScrollPane1.setViewportView(childrenTable);

        addChildButton.setText(I18n.t("add_child"));
        addChildButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addChildButtonActionPerformed(evt);
            }
        });

        removeChildButton.setText(I18n.t("remove_child"));
        removeChildButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeChildButtonActionPerformed(evt);
            }
        });

        upTreeButton.setText(I18n.t("up_tree"));
        upTreeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upTreeButtonActionPerformed(evt);
            }
        });

        downTreeButton.setText(I18n.t("down_tree"));
        downTreeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downTreeButtonActionPerformed(evt);
            }
        });

        saveTreeButton.setText(I18n.t("save_tree"));
        saveTreeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTreeButtonActionPerformed(evt);
            }
        });

        editNodeButton.setText(I18n.t("edit_child"));
        editNodeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editNodeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hipotesisNameLabel)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(editNodeButton)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(removeChildButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(addChildButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(downTreeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(upTreeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(saveTreeButton))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(policyLabel)
                            .addComponent(policyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(conditionNodeComboBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(conditionNodeLabel, javax.swing.GroupLayout.Alignment.LEADING))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addChildButton, downTreeButton, editNodeButton, removeChildButton, saveTreeButton, upTreeButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(hipotesisNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(policyLabel)
                    .addComponent(conditionNodeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(policyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(conditionNodeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(addChildButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeChildButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editNodeButton)
                        .addGap(16, 16, 16)
                        .addComponent(upTreeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(downTreeButton)
                        .addGap(58, 58, 58)
                        .addComponent(saveTreeButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void policyComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_policyComboBoxActionPerformed
        int policyCode = policyComboBox.getSelectedIndex();
        hipotesis.setPolicy(Policy.createPolicy(policyCode));
    }//GEN-LAST:event_policyComboBoxActionPerformed

    private void conditionNodeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conditionNodeComboBoxActionPerformed
        int nodeIndex = conditionNodeComboBox.getSelectedIndex() - 1;
        if (nodeIndex == 0 || nodeIndex == -1) {
            hipotesis.getPolicy().setConditionNode(null);
        } else {
            hipotesis.getPolicy().setConditionNode(hipotesis.getChildren().get(nodeIndex));
        }
    }//GEN-LAST:event_conditionNodeComboBoxActionPerformed

    private void addChildButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addChildButtonActionPerformed
        MainFrame.getInstance().startEditing();
    }//GEN-LAST:event_addChildButtonActionPerformed

    private void removeChildButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeChildButtonActionPerformed
        int childIndex = childrenTable.getSelectedRow();
        if (childIndex != -1) {
            Edit.getInstance().removeNode(hipotesis.getChildren().remove(childIndex));
            childrenTable.repaint();
        } else {
            JOptionPane.showConfirmDialog(this, I18n.t("error_child_not_selected"), I18n.t("warning"), JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_removeChildButtonActionPerformed

    private void upTreeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upTreeButtonActionPerformed
        MainFrame.getInstance().upTree();
    }//GEN-LAST:event_upTreeButtonActionPerformed

    private void downTreeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downTreeButtonActionPerformed
        int childIndex = childrenTable.getSelectedRow();
        if (childIndex == -1) {
            JOptionPane.showConfirmDialog(this, I18n.t("error_child_not_selected"), I18n.t("warning"), JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE);
        } else {
            Node child = hipotesis.getChildren().get(childIndex);
            if (child.isHipotesis()) {
                MainFrame.getInstance().pushNode(child);
                MainFrame.getInstance().downTree();
            } else {
                JOptionPane.showConfirmDialog(this, I18n.t("error_child_not_hipotesis"), I18n.t("warning"), JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_downTreeButtonActionPerformed

    private void saveTreeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTreeButtonActionPerformed
        JFileChooser fc = new JFileChooser() {

            @Override
            public void approveSelection() {
                File f = getSelectedFile();
                if (f.exists() && getDialogType() == SAVE_DIALOG) {
                    int result = JOptionPane.showConfirmDialog(this, I18n.t("warning_file_exists"), I18n.t("title_warning_file_exists"), JOptionPane.YES_NO_CANCEL_OPTION);
                    switch (result) {
                        case JOptionPane.YES_OPTION:
                            super.approveSelection();
                            return;
                        case JOptionPane.NO_OPTION:
                            return;
                        case JOptionPane.CANCEL_OPTION:
                            cancelSelection();
                            return;
                    }
                }
                super.approveSelection();
            }
        };

        if (fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                Edit.getInstance().saveTree(fc.getSelectedFile());
                MainFrame.getInstance().menu();
            } catch (IOException e) {
                e.printStackTrace();
                JOptionPane.showConfirmDialog(this, I18n.t("error_io"), I18n.t("warning"), JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_saveTreeButtonActionPerformed

    private void editNodeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editNodeButtonActionPerformed
        int childIndex = childrenTable.getSelectedRow();
        if (childIndex != -1) {
            MainFrame.getInstance().startEditing(hipotesis.getChildren().get(childIndex), hipotesis);
        } else {
            JOptionPane.showConfirmDialog(this, I18n.t("error_child_not_selected"), I18n.t("warning"), JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_editNodeButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addChildButton;
    private javax.swing.JTable childrenTable;
    private javax.swing.JComboBox conditionNodeComboBox;
    private javax.swing.JLabel conditionNodeLabel;
    private javax.swing.JButton downTreeButton;
    private javax.swing.JButton editNodeButton;
    private javax.swing.JLabel hipotesisNameLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox policyComboBox;
    private javax.swing.JLabel policyLabel;
    private javax.swing.JButton removeChildButton;
    private javax.swing.JButton saveTreeButton;
    private javax.swing.JButton upTreeButton;
    // End of variables declaration//GEN-END:variables

    private class NodesTableModel extends AbstractTableModel {

        private List<Node> nodes;

        public NodesTableModel(List<Node> nodes) {
            this.nodes = nodes;
        }

        public int getRowCount() {
            return nodes.size();
        }

        public int getColumnCount() {
            return 2;
        }

        public Object getValueAt(int rowIndex, int columnIndex) {
            Node row = nodes.get(rowIndex);
            switch (columnIndex) {
                case 0:
                    return row.getName();
                case 1:
                    return row.isHipotesis();
                default:
                    return "";
            }
        }

        @Override
        public String getColumnName(int column) {
            switch (column) {
                case 0:
                    return I18n.t("node_name");
                case 1:
                    return I18n.t("node_is_hipotesis");
                default:
                    return "";
            }
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return false;
        }
    }
}
